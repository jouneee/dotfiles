/// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            layout "us,ru"
            options "grp:alt_shift_toggle,compose:ralt,ctrl:nocaps"
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        off
        //tap
        // dwt
        // dwtp
        //natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    tablet {
    }

    trackpoint {
        off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    //warp-mouse-to-focus
    //focus-follows-mouse max-scroll-amount="10%"  
}

gestures {
  hot-corners {
    off
  }
}


// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "DP-1" {
    mode "2560x1440@143.972"
    scale 1.0
    transform "normal"
    focus-at-startup
    position x=0 y=0
}

output "HDMI-A-1" {
    mode "1920x1080@60"
    scale 1.0
    transform "90"
    position x=2560 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    gaps 5
    center-focused-column "never"
    always-center-single-column
    background-color "transparent"

    // default-column-display "tabbed"

    tab-indicator {
        hide-when-single-tab
        position "top"
    }

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.666
    }

    default-column-width { proportion 0.5; }

    focus-ring {
        // off
        width 2
        // inactive-color "#505050"
        // active-gradient from="#40f99b" to="#45ecff" angle=69
        inactive-color "#37212D"
        // active-gradient from="#E5DBE6" to="#E2B7F2" angle=69
        active-color "#D6C7AC"
    }

    border {
        off
    }

    shadow {
    	on
    	softness 30
    	spread 5
    	draw-behind-window true
    	color "#00000070"
    }

    struts {
        left 0
        right 0
        top 0
        bottom 0
    }
}

overview {
  zoom 0.45
}

spawn-at-startup "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP"
spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1"
spawn-at-startup "flatpak" "run" "com.github.wwmm.easyeffects" "--gapplication-service"
spawn-at-startup "swww-daemon"
spawn-at-startup "~/.config/niri/wallpapers.sh"
spawn-at-startup "~/.config/niri/float.py"
spawn-at-startup "/usr/bin/gnome-keyring-daemon" "-s"
spawn-at-startup "nm-applet"

environment {
  QT_QPA_PLATFORM "wayland;xcb"
  ELECTRON_OZONE_PLATFORM_HINT "auto"
  MOZ_DISABLE_RDD_SANDBOX "1"
  LIBVA_DRIVER_NAME "nvidia"
  __GLX_VENDOR_LIBRARY_NAME "nvidia"
  NVD_BACKEND "direct"
  SWWW_TRANSITION "random"
  SWWW_TRANSITION_STEP "5"
  SWWW_TRANSITION_FPS "60"
}

cursor {
  xcursor-size 24
  xcursor-theme "Marisa-Kirisame"
}

prefer-no-csd
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
//screenshot-path null

animations {
    off
    slowdown 0.300

    window-close {
      duration-ms 1500
      curve "linear"

      custom-shader r"
        vec4 fall_and_rotate(vec3 coords_geo, vec3 size_geo) {
            // For this shader, set animation curve to linear for best results.

            // Simulate an accelerated fall: square the (linear) progress.
            float progress = niri_clamped_progress * niri_clamped_progress;

            // Get our rotation pivot point coordinates at the bottom center of the window.
            vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;

            // Move the window down to simulate a fall.
            coords.y += progress * 200.0;

            // Randomize rotation direction and maximum angle.
            float random = (niri_random_seed - 0.5) / 2.0;
            random = sign(random) - random;
            float max_angle = 0.05 * random;

            // Rotate the window around our pivot point.
            float angle = progress * max_angle;
            mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
            coords = rotate * coords;

            // Transform the coordinates back.
            coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);

            // Sample the window texture.
            vec3 coords_tex = niri_geo_to_tex * coords_geo;
            vec4 color = texture2D(niri_tex, coords_tex.st);

            // Multiply by alpha to fade out.
            return color * (1.0 - niri_clamped_progress);
        }
		vec4 close_color(vec3 coords_geo, vec3  size_geo) {
			// You can pick one of the example functions or write your own.
			return fall_and_rotate(coords_geo, size_geo);
		}
      "
    }
}

workspace "vertical" {
    open-on-output "HDMI-A-1"
} 

// general rules

window-rule {
    geometry-corner-radius 0
    clip-to-geometry true
}

window-rule {
	  match is-floating=true
	  draw-border-with-background false
}

layer-rule {
  match namespace="^wallpaper$"
  place-within-backdrop true
}

// screencast rules
layer-rule {
    match namespace="^notifications$"
    block-out-from "screencast"
}

layer-rule {
  match namespace=r#"(.)"#
  baba-is-float false
}

window-rule {
	  match app-id=r#"^org\.telegram\.desktop$"#
	  block-out-from "screencast"
	  default-column-width { proportion 0.3333; }
}

window-rule {
	match is-window-cast-target=true
	focus-ring {
		active-color "#faff81"
		inactive-color "#ffc53a"	
	}

	border {
		off		
	}
	shadow {
		color "#ffc53a"
	}
	tab-indicator {
		active-color "#faff81"
		inactive-color "#ffc53a"
	}
}
window-rule {
  match is-floating=true
  default-column-width { proportion 0.5;} 
  default-window-height { fixed 720; }
}

// application rules

window-rule {
  match app-id=r#"org.gnome.Nautilus"#
  match app-id=r#"nemo"#
  match app-id=r#"Thunar$"#
  match app-id=r#"mpv"#
  match app-id=r#"imv"#	
	match app-id=r#"pavucontrol"#
	match app-id=r#"thunar"#
  match app-id=r#"PortProton"#
  match app-id=r#"mousepad"#
  open-floating true
  open-maximized false
  open-fullscreen false
}

window-rule {
	match app-id=r#"librewolf"#
  match app-id=r#"krita"#
  match app-id=r#"blender"#
	match app-id=r#"codium"#
	match app-id=r#"^osu!$"#
  match app-id=r#"^magicavoxel.exe$"#
  match app-id=r#"^Godot$"#
  match app-id=r#"^steam_app_.*$"#
  open-maximized true
  default-column-width { proportion 1.0; }
}

window-rule{
	match app-id=r#"^org\.telegram\.desktop$"# title="Media viewer"
  open-floating true
  open-maximized true
}

window-rule {
  match app-id=r#"kitty"#
  default-column-display "tabbed"
}

window-rule {
  match app-id=r#"steam"# title="Sign in to Steam"
  match app-id=r#"org.gnome.FileRoller"# title="Extract"
  default-column-width {}
  open-focused false
}

window-rule {
  match app-id=r#"^steam$"#
  exclude title=r#"^Steam$"#
  open-floating true
}

window-rule {
  match app-id=r#".*wooz"#
  focus-ring {
    off
  }
  open-floating true
}

window-rule {
  match app-id=r#"krita"#
  exclude title=r#"^Krita$"#
  open-floating true
  default-column-width { proportion 0.5;} 
  default-window-height { fixed 720; }
}

window-rule {
  match app-id=r#"Godot"#
  exclude title=r#"^Godot.*$"#
  open-floating true
  default-column-width { proportion 0.666; }
  default-window-height { fixed 1100; }
}

hotkey-overlay {
	skip-at-startup
}
	
binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    // Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+D { spawn "kitty"; }
    Super+Space { spawn "fuzzel"; }
    Mod+A { spawn "nemo";}
    Mod+B { spawn "librewolf"; }
	Mod+Shift+B { spawn "chromium"; }
    Mod+Z { spawn "wooz"; }
    Mod+Shift+P { power-off-monitors; }
    Mod+Shift+L { spawn "~/.config/niri/swaylock.sh"; }
    Mod+Shift+C { spawn "hyprpicker" "-a";}
    Mod+Alt+Pause {spawn "pactl" "set-source-mute" "@DEFAULT_SOURCE@" "toggle";}

    // You can also use a shell. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument in the end.
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    Mod+Q { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }
    
    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Ctrl+Shift+F { toggle-windowed-fullscreen; }
    Mod+C { center-column; }
	
    Mod+W { toggle-column-tabbed-display; }

    Mod+Shift+Left { focus-monitor-left; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Ctrl+Shift+Left { move-column-to-monitor-left; }
    Mod+Ctrl+Shift+Right { move-column-to-monitor-right; }

    // Finer height adjustments when in column with other windows.
    Mod+Ctrl+Shift+Up { set-window-height "-10%"; }
    Mod+Ctrl+Shift+Down { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot show-pointer=true; }
    Ctrl+Print { screenshot-screen show-pointer=true; }

    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    Alt+Print { set-dynamic-cast-window; }
    Ctrl+Alt+Print { clear-dynamic-cast-target; }
  }

